generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  score           Int               @default(0)
  hashedPassword  String?
  accounts        Account[]
  sessions        Session[]
  Accomplishments Accomplishments[]
  Stars           Stars[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Badges {
  id              String            @id @default(cuid())
  name            String
  Accomplishments Accomplishments[]
}

model Accomplishments {
  id      String @id @default(cuid())
  userId  String
  badgeId String
  badge   Badges @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Modules {
  id     String   @id @default(cuid())
  name   String
  desc   String
  Levels Levels[]
}

model Levels {
  id          String      @id @default(cuid())
  name        String
  moduleId    String
  youtubeLink String
  descritpion String
  module      Modules     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  Questions   Questions[]
  Stars       Stars[]
}

model Stars {
  id         String  @id @default(cuid())
  userId     String
  levelId    String
  easyStar   Boolean
  mediumStar Boolean
  hardStar   Boolean
  level      Levels  @relation(fields: [levelId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Questions {
  id         String     @id @default(cuid())
  question   String
  levelId    String
  difficulty Difficulty
  Hints      Hints[]
  Options    Options[]
  level      Levels     @relation(fields: [levelId], references: [id], onDelete: Cascade)
}

model Options {
  id         String    @id @default(cuid())
  option     String
  isCorrect  Boolean
  questionId String
  question   Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Hints {
  id         String    @id @default(cuid())
  hint       String
  questionId String
  question   Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum Status {
  Active
  Completed
  NotAttempted
}

enum Difficulty {
  Easy
  Medium
  Hard
}
